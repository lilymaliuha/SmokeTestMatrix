package com.xyleme.bravais.documentcontentextractor;

import com.xyleme.bravais.BaseTest;
import com.xyleme.bravais.datacontainers.FileType;
import com.xyleme.bravais.utils.FileDownloader;
import com.xyleme.bravais.utils.Utils;
import com.xyleme.bravais.web.elements.Element;
import com.xyleme.bravais.web.elements.Link;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import java.io.IOException;

/**
 * This class contains common methods and fields for classes which involve extraction from a document (PDF, PPTX, DOCX).
 */
public class BaseDocumentContentExtractor {
    WebDriver driver;
    String pathToDownloadedFile;

    /**
     * Waits until link for downloading document generated by MSIS preview is available on the MSIS preview page and
     * downloads the file using the link.
     *
     * @param fileType - Specifies document type
     * @return {@code String}
     */
    String waitUntilMSISPreviewDocumentLinkIsGeneratedAndDownloadGeneratedFile(FileType fileType) {
        String documentDownloadingURL;
        String fileName;
        Link downloadLink = new Link(driver, By.xpath("//a[@id='resultLink']"));
        Element resultBlock = new Element(driver, By.xpath("//p[@class='resultText']"));
        int i = 0;
        while (!resultBlock.isAvailable() && !downloadLink.isAvailable() && i < 600) {
            if (!driver.getTitle().contains("ERROR")) {
                BaseTest.staticSleep(1);
                i++;
            } else {
                throw new RuntimeException("Preview process resulted in Error!");
            }
        }
        String documentType = getDefinitionOfDocumentType(fileType);
        System.out.println("Time taken by processing " + documentType + " document for MSIS preview: " + i + " seconds.");

        if (downloadLink.isAvailable()) {
            documentDownloadingURL = downloadLink.getAttribute("href");
            fileName = downloadLink.getText();
            fileName = fileName.substring(0, fileName.lastIndexOf("."));
            System.out.println("File Name: " + fileName);
        } else {
            throw new RuntimeException("Link for downloading " + documentType +
                    " file from MSIS preview screen is not available.");
        }

        try {
            pathToDownloadedFile = new FileDownloader(driver, documentDownloadingURL).downloadFile(fileType, fileName);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assert pathToDownloadedFile != null;
        return pathToDownloadedFile;
    }

    /**
     * Gets document type.
     *
     * @param fileType - Specifies the file.
     * @return {@code String}
     */
    public static String getDefinitionOfDocumentType(FileType fileType) {
        String fileExtension = "";
        switch (fileType) {
            case WORD_DOC:
                fileExtension = "WORD (.doc)";
                break;
            case WORD_DOCX:
                fileExtension = "WORD (.docx)";
                break;
            case PDF:
                fileExtension = "PDF";
                break;
            case PPT:
                fileExtension ="PPT";
                break;
            case PPTX:
                fileExtension = "PPTX";
                break;
        }
        return fileExtension;
    }

    /**
     * Gets name of downloaded document of specified type.
     *
     * @param fileType - Specifies type of the file expected to be returned by the method
     * @return {@code String}
     */
    public String getNameOfDownloadedDocument(FileType fileType) {
        assert pathToDownloadedFile != null;
        return Utils.getFileInDownloadsFolder(fileType);
    }
}